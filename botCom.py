# --- –ò–º–ø–æ—Ä—Ç—ã ---
import os
import json
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from catalog import oils  # —Å–ª–æ–≤–∞—Ä—å —Å –º–∞—Å–ª–∞–º–∏

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥–º–∏–Ω–æ–≤ ---
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

ORDERS_FILE = "orders.json"


# --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ ---
def save_order(order):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª orders.json —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID."""
    try:
        if os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, "r", encoding="utf-8") as f:
                orders = json.load(f)
        else:
            orders = []
    except:
        orders = []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    order_id = len(orders) + 1
    order["id"] = f"#{order_id:03}"  # –Ω–∞–ø—Ä–∏–º–µ—Ä: #001, #002, #010

    orders.append(order)

    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=2)

    return order["id"]


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–æ–≤.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "/about ‚Äî –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/orders ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


# --- –ö–∞—Ç–∞–ª–æ–≥ ---
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–∞—Å–µ–ª —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫."""
    keyboard = [
        [InlineKeyboardButton(f"{oil['name']} ({oil['volume']})", callback_data=str(oil_id))]
        for oil_id, oil in oils.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:  # –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
    else:  # –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ /catalog
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def show_oil(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Å–ª–∞ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥
    if data == "back":
        await show_catalog(update, context)
        return

    # –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
    if data.startswith("order_"):
        oil_id = int(data.split("_")[1])
        oil = oils[oil_id]
        text = (
            f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"*{oil['name']}* ({oil['volume']})\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram), "
            f"–∏ —è –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await query.edit_message_text(text, parse_mode="Markdown")
        context.user_data["ordering"] = oil_id
        return

    # –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å–ª–∞
    if data.isdigit():
        oil_id = int(data)
        if oil_id not in oils:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        oil = oils[oil_id]
        text = (
            f"üîπ *{oil['name']}* ({oil['volume']})\n\n"
            f"{oil['description']}\n\n"
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            + "\n".join([f"‚Ä¢ {f}" for f in oil["features"]])
            + f"\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç: {oil['compatible']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")],
            [InlineKeyboardButton("üõí –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"order_{oil_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.delete_message()  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.message.reply_photo(
            photo=oil["image"],
            caption=text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ (—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤."""
    user = update.effective_user
    text = update.message.text

    if "ordering" in context.user_data:
        oil_id = context.user_data["ordering"]
        oil = oils[oil_id]
        username = f"@{user.username}" if user.username else f"ID:{user.id}"

        order = {
            "user_id": user.id,
            "username": user.username,
            "oil": oil["name"],
            "volume": oil["volume"],
            "contact": text,
        }

        order_id = save_order(order)

        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {order_id} –Ω–∞ {oil['name']} ({oil['volume']}) –ø—Ä–∏–Ω—è—Ç–∞.\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
        )

        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id}\n\n"
                    f"üõí –¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']})\n"
                    f"üë§ –û—Ç: {username}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
                )
            )

        del context.user_data["ordering"]
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ.")


# --- –ö–æ–º–∞–Ω–¥–∞ /orders (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ orders.json (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)."""
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await update.message.reply_text(
            f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.\n–í–∞—à ID: {user.id}"
        )
        return

    try:
        if os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, "r", encoding="utf-8") as f:
                orders = json.load(f)
        else:
            orders = []
    except:
        orders = []

    if not orders:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for order in orders[-10:]:
        order_id = order.get("id", "‚ùì")
        username = order.get("username") or f"ID:{order.get('user_id')}"
        text += (
            f"{order_id} ‚Äî {order['oil']} ({order['volume']})\n"
            f"üë§ –û—Ç: {username}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order['contact']}\n\n"
        )

    await update.message.reply_text(text)


# --- –ö–æ–º–∞–Ω–¥–∞ /about ---
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üè™ *–û –Ω–∞—Å*\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n"
        "üîß –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã.\n\n"
        "üìç –ê–¥—Ä–µ—Å: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –°–µ—Ä–∞—Ñ–∏–º—ã –î–µ—Ä—è–±–∏–Ω–æ–π, –¥. 18–∞\n"
        "üïò –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 21:00"
    )
    await update.message.reply_text(text, parse_mode="Markdown")


# --- –ö–æ–º–∞–Ω–¥–∞ /contacts ---
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 559-39-17, +7 (953) 046-36-54\n"
        "Telegram: @shaba_v, @andrey_matveev\n"
        "–ê–≤–∏—Ç–æ: https://m.avito.ru/brands/2c07f021e144d3169204cd556d312cdf/items/all"
    )
    await update.message.reply_text(text)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("contacts", contacts))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("catalog", show_catalog))
    app.add_handler(CommandHandler("orders", show_orders))
    app.add_handler(CallbackQueryHandler(show_oil))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()
