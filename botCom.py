# --- –ò–º–ø–æ—Ä—Ç—ã ---
import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from catalog import oils  # —Å–ª–æ–≤–∞—Ä—å —Å –º–∞—Å–ª–∞–º–∏

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥–º–∏–Ω–æ–≤ ---
load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

if not ADMIN_IDS:
    logger.warning("ADMIN_IDS –ø—É—Å—Ç ‚Äî /orders –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

ORDERS_FILE = "orders.json"

# –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª orders.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(ORDERS_FILE):
    try:
        with open(ORDERS_FILE, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        logger.info("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π orders.json")
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å orders.json: %s", e)


# --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ ---
def save_order(order):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª orders.json —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID."""
    try:
        if os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, "r", encoding="utf-8") as f:
                orders = json.load(f)
        else:
            orders = []
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å orders.json: %s", e)
        orders = []

    order_id = len(orders) + 1
    order["id"] = f"#{order_id:03}"  # #001, #002 ‚Ä¶

    orders.append(order)

    try:
        with open(ORDERS_FILE, "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å orders.json: %s", e)

    return order["id"]


# --- Error handler ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception while handling update:", exc_info=context.error)
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}"
            )
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É %s", admin_id)


# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
async def safe_reply_text(target, text: str, parse_mode: str | None = None, **kwargs):
    try:
        return await target.reply_text(text, parse_mode=parse_mode, **kwargs)
    except Exception as e:
        logger.warning("reply_text —É–ø–∞–ª (%s). –ü—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode‚Ä¶", e)
        try:
            return await target.reply_text(
                text, **{k: v for k, v in kwargs.items() if k != "parse_mode"}
            )
        except Exception:
            logger.exception("reply_text –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–ø–∞–ª")
    return None


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(
        update.message,
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–æ–≤.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "/about ‚Äî –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/orders ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /id ---
async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(update.message, f"–í–∞—à Telegram ID: {update.effective_user.id}")


# --- –ö–æ–º–∞–Ω–¥–∞ /cancel ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "ordering" in context.user_data:
        del context.user_data["ordering"]
        await safe_reply_text(
            update.message,
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ —Å–Ω–æ–≤–∞.",
        )
    else:
        await safe_reply_text(update.message, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ /catalog.")


# --- –ö–∞—Ç–∞–ª–æ–≥ ---
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{oil['name']} ({oil['volume']})", callback_data=str(oil_id))]
        for oil_id, oil in oils.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        try:
            await query.answer()
        except Exception:
            pass

        if query.message.photo:
            try:
                await query.delete_message()
            except Exception:
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥")
            await safe_reply_text(query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
        else:
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
            except Exception as e:
                logger.debug("edit_message_text –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (%s). –®–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", e)
                await safe_reply_text(query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
    else:
        await safe_reply_text(update.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def show_oil(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        await show_catalog(update, context)
        return

    if data.startswith("order_"):
        oil_id = int(data.split("_")[1])
        oil = oils[oil_id]
        text = (
            "üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"{oil['name']} ({oil['volume']})\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram), "
            "–∏ —è –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await safe_reply_text(query.message, text)
        context.user_data["ordering"] = oil_id
        return

    if data.isdigit():
        oil_id = int(data)
        if oil_id not in oils:
            await safe_reply_text(query.message, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        oil = oils[oil_id]
        text = (
            f"üîπ *{oil['name']}* ({oil['volume']})\n\n"
            f"{oil['description']}\n\n"
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            + "\n".join([f"‚Ä¢ {f}" for f in oil["features"]])
            + f"\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç: {oil['compatible']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")],
            [InlineKeyboardButton("üõí –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"order_{oil_id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.delete_message()
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–∞—Ä—Ç–æ—á–∫–∏")

        await query.message.reply_photo(
            photo=oil["image"],
            caption=text,
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if "ordering" in context.user_data:
        oil_id = context.user_data["ordering"]
        oil = oils[oil_id]
        username_visible = f"@{user.username}" if user.username else f"ID:{user.id}"

        order = {
            "user_id": user.id,
            "username": user.username,
            "oil": oil["name"],
            "volume": oil["volume"],
            "contact": text,
        }

        order_id = save_order(order)

        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {order_id} –Ω–∞ {oil['name']} ({oil['volume']}) –ø—Ä–∏–Ω—è—Ç–∞.\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
        )

        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=(
                        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id}\n\n"
                        f"üõí –¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']})\n"
                        f"üë§ –û—Ç: {username_visible}\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
                    ),
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        del context.user_data["ordering"]
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ.")


# --- –ö–æ–º–∞–Ω–¥–∞ /orders ---
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await safe_reply_text(update.message, f"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n–í–∞—à ID: {user.id}")
        return

    try:
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            orders = json.load(f)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å orders.json –≤ /orders: %s", e)
        orders = []

    if not orders:
        await safe_reply_text(update.message, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = ["üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n"]
    for order in orders[-10:]:
        username_visible = order.get("username")
        username_visible = f"@{username_visible}" if username_visible else f"ID:{order.get('user_id')}"
        lines.append(
            f"{order.get('id', '?')} ‚Äî {order['oil']} ({order['volume']})\n"
            f"üë§ –û—Ç: {username_visible}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order['contact']}\n"
        )

    await safe_reply_text(update.message, "\n".join(lines))


# --- –ö–æ–º–∞–Ω–¥–∞ /about ---
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(
        update.message,
        "üè™ –û –Ω–∞—Å\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n"
        "üîß –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã.\n\n"
        "üìç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –°–µ—Ä–∞—Ñ–∏–º—ã –î–µ—Ä—è–±–∏–Ω–æ–π, –¥. 18–∞\n"
        "üïò 9:00 ‚Äî 21:00",
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /contacts ---
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(
        update.message,
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 559-39-17, +7 (953) 046-36-54\n"
        "Telegram: @shaba_v, @andrey_matveev\n"
        "–ê–≤–∏—Ç–æ: https://m.avito.ru/brands/2c07f021e144d3169204cd556d312cdf/items/all",
    )


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("catalog", show_catalog))
    app.add_handler(CommandHandler("orders", show_orders))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("contacts", contacts))
    app.add_handler(CommandHandler("id", my_id))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(show_oil))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()
