# --- –ò–º–ø–æ—Ä—Ç—ã ---
import os
import json
import logging
import sqlite3
import re
import time
import io
import csv
from datetime import datetime

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.request import HTTPXRequest
from openpyxl import Workbook

from catalog import oils  # —Å–ª–æ–≤–∞—Ä—å —Å –º–∞—Å–ª–∞–º–∏

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥–º–∏–Ω–æ–≤ ---
load_dotenv()
TOKEN = os.getenv("TOKEN")

ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

# --- –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º ---
ORDERS_FILE = "orders.json"   # –Ω–∞ —Å–ª—É—á–∞–π –º–∏–≥—Ä–∞—Ü–∏–∏
DB_PATH = "orders.db"         # SQLite

# --- –ê–Ω—Ç–∏—Å–ø–∞–º ---
ORDER_COOLDOWN_SEC = 30
LAST_ORDER_AT: dict[int, float] = {}  # user_id -> ts –ø–æ—Å–ª–µ–¥–Ω–µ–π –£–°–ü–ï–®–ù–û–ô –∑–∞—è–≤–∫–∏


# ---------- –ë–ê–ó–ê –î–ê–ù–ù–´–• (SQLite) ----------
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É orders –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute(
            """
            CREATE TABLE IF NOT EXISTS orders (
                id         INTEGER PRIMARY KEY AUTOINCREMENT,
                created_at TEXT    DEFAULT (datetime('now')),
                user_id    INTEGER,
                username   TEXT,
                oil        TEXT,
                volume     TEXT,
                price      TEXT,
                currency   TEXT,
                contact    TEXT
            )
            """
        )
        conn.commit()
    finally:
        conn.close()


def save_order_sql(order: dict) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤–∏–¥–∞ #001."""
    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute(
            """
            INSERT INTO orders (user_id, username, oil, volume, price, currency, contact)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """,
            (
                order.get("user_id"),
                order.get("username"),
                order.get("oil"),
                order.get("volume"),
                order.get("price"),
                order.get("currency"),
                order.get("contact"),
            ),
        )
        conn.commit()
        row_id = c.lastrowid
        return f"#{row_id:03}"
    finally:
        conn.close()


def fetch_orders_page(page: int, page_size: int = 10):
    """–ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (rows, total)."""
    page = max(1, page)
    offset = (page - 1) * page_size
    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM orders")
        total = c.fetchone()[0] or 0

        c.execute(
            """
            SELECT id, user_id, username, oil, volume, price, currency, contact, created_at
            FROM orders
            ORDER BY id DESC
            LIMIT ? OFFSET ?
            """,
            (page_size, offset),
        )
        rows = c.fetchall()
        return rows, total
    finally:
        conn.close()


def db_is_empty() -> bool:
    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='orders'")
        if not c.fetchone():
            return True
        c.execute("SELECT COUNT(*) FROM orders")
        return (c.fetchone()[0] or 0) == 0
    finally:
        conn.close()


def migrate_json_to_sql():
    """–†–∞–∑–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ orders.json –≤ SQLite (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏ JSON –µ—Å—Ç—å)."""
    if not os.path.exists(ORDERS_FILE):
        return
    if not db_is_empty():
        return

    try:
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            orders = json.load(f)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: %s", ORDERS_FILE, e)
        return

    if not isinstance(orders, list) or not orders:
        return

    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é %s -> %s (%d –∑–∞–ø–∏—Å–µ–π)", ORDERS_FILE, DB_PATH, len(orders))
    conn = sqlite3.connect(DB_PATH)
    inserted = 0
    try:
        c = conn.cursor()
        for old in orders:
            try:
                c.execute(
                    """
                    INSERT INTO orders (user_id, username, oil, volume, price, currency, contact)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                    """,
                    (
                        old.get("user_id"),
                        old.get("username"),
                        old.get("oil"),
                        old.get("volume"),
                        old.get("price", "‚Äî"),
                        old.get("currency", "‚ÇΩ"),
                        old.get("contact"),
                    ),
                )
                inserted += 1
            except Exception as e:
                logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: %s", e)
        conn.commit()
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d", inserted)
    finally:
        conn.close()


# ---------- –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–¢–ê–ö–¢–ê ----------
PHONE_RE = re.compile(
    r"""^\s*
        (?:
            (\+?\d[\d\-\s\(\)]{8,}\d)      | # —Ç–µ–ª–µ—Ñ–æ–Ω
            (@[A-Za-z0-9_]{5,})            | # username
            (https?://t\.me/[A-Za-z0-9_]+)   # —Å—Å—ã–ª–∫–∞ t.me
        )
        \s*$""",
    re.VERBOSE,
)

def validate_contact(text: str) -> tuple[bool, str | None]:
    if not text:
        return False, "–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–∞–∫—Ç. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram."
    m = PHONE_RE.match(text)
    if not m:
        return False, (
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ +7 900 123-45-67\n"
            "‚Ä¢ @username\n"
            "‚Ä¢ https://t.me/username"
        )
    return True, text.strip()


# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception while handling update:", exc_info=context.error)
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}",
            )
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s", admin_id)


async def safe_reply_text(target, text: str, parse_mode: str | None = None, **kwargs):
    try:
        return await target.reply_text(text, parse_mode=parse_mode, **kwargs)
    except Exception as e:
        logger.warning("reply_text —É–ø–∞–ª (%s). –ü—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode‚Ä¶", e)
        try:
            return await target.reply_text(text, **{k: v for k, v in kwargs.items() if k != "parse_mode"})
        except Exception:
            logger.exception("reply_text –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–ø–∞–ª")
    return None


# --- –º–∏–Ω–∏-—Ö–µ–ª–ø–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª ---
async def show_typing(context: ContextTypes.DEFAULT_TYPE, chat_id: int, seconds: float = 0.8):
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception:
        return
    if seconds > 0:
        import asyncio
        await asyncio.sleep(seconds)


# ---------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ----------
def fetch_stats():
    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        # –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        c.execute("SELECT COUNT(*) FROM orders")
        total = c.fetchone()[0] or 0

        # –∑–∞ 7 –¥–Ω–µ–π
        c.execute("""
            SELECT COUNT(*) FROM orders
            WHERE created_at >= datetime('now','-7 days')
        """)
        last7 = c.fetchone()[0] or 0

        # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        c.execute("SELECT COUNT(DISTINCT user_id) FROM orders")
        uniq_users = c.fetchone()[0] or 0

        # —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤
        c.execute("""
            SELECT oil, COUNT(*) as cnt
            FROM orders
            GROUP BY oil
            ORDER BY cnt DESC
            LIMIT 5
        """)
        top = c.fetchall()  # [(oil, cnt), ...]

        return {
            "total": total,
            "last7": last7,
            "uniq_users": uniq_users,
            "top": top,
        }
    finally:
        conn.close()


# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    s = fetch_stats()
    lines = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:",
        f"‚Ä¢ –í—Å–µ–≥–æ: {s['total']}",
        f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: {s['last7']}",
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {s['uniq_users']}",
        "",
        "üèÜ –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:",
    ]
    if s["top"]:
        for oil, cnt in s["top"]:
            lines.append(f"  ‚Äî {oil}: {cnt}")
    else:
        lines.append("  ‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    await update.message.reply_text("\n".join(lines))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_admin_user = user_id in ADMIN_IDS

    # –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–æ–≤.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "/about ‚Äî –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/find <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

    # –±–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin_user:
        text += (
            "\n\nüëë –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
            "/orders [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] ‚Äî –∑–∞—è–≤–∫–∏\n"
            "/exportxlsx ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –≤ XLSX\n"
            "/exportcsv ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –≤ CSV\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog")],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", callback_data="open_search_hint")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_reply_text(update.message, text, reply_markup=reply_markup)


# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é ---
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "open_catalog":
        await show_typing(context, query.message.chat.id, 0.5)
        await show_catalog(update, context)
    elif query.data == "open_search_hint":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π:\n/find castrol 1 –ª")


# --- –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É ---
async def find_oil(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_query = " ".join(context.args).strip().lower() if context.args else ""
    if not user_query:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find —Ç–µ–∫—Å—Ç_–ø–æ–∏—Å–∫–∞\n–ù–∞–ø—Ä.: /find castrol 1 –ª")
        return

    await show_typing(context, update.effective_chat.id, 0.5)

    results = []
    for oid, oil in oils.items():
        blob = " ".join([
            oil.get("name", ""),
            oil.get("volume", ""),
            oil.get("description", ""),
            " ".join(oil.get("features", [])),
            oil.get("compatible", "")
        ]).lower()
        if all(tok in blob for tok in user_query.split()):
            results.append((oid, oil))

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ü§∑\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        return

    keyboard = [
        [InlineKeyboardButton(f"{oil['name']} ({oil['volume']})", callback_data=str(oid))]
        for oid, oil in results[:10]
    ]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")])
    await update.message.reply_text(
        f"–ù–∞–π–¥–µ–Ω–æ: {len(results)}. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {min(len(results),10)}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# ---------- –ö–ê–¢–ê–õ–û–ì / –ö–ù–û–ü–ö–ò ----------
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_typing(context, update.effective_chat.id, 0.6)

    keyboard = [
        [InlineKeyboardButton(f"{oil['name']} ({oil['volume']})", callback_data=str(oil_id))]
        for oil_id, oil in oils.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        try:
            await query.answer()
        except Exception:
            pass
        if getattr(query.message, "photo", None):
            try:
                await query.delete_message()
            except Exception:
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥")
            await safe_reply_text(query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
        else:
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
            except Exception:
                await safe_reply_text(query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)
    else:
        await safe_reply_text(update.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ:", reply_markup=reply_markup)


async def show_oil(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        await show_catalog(update, context)
        return

    # –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
    if data.startswith("order_"):
        oil_id = int(data.split("_")[1])
        oil = oils[oil_id]

        # –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π "—Ç–æ—Å—Ç"
        await query.answer("–û–∫, –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç üëá", show_alert=False)

        text = (
            f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"{oil['name']} ({oil['volume']}) ‚Äî {oil.get('price', '—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')} {oil.get('currency', '‚ÇΩ')}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel"
        )
        kb = [
            [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            [KeyboardButton("–û—Ç–º–µ–Ω–∞ /cancel")],
        ]
        await query.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True),
        )
        context.user_data["ordering"] = oil_id
        return

    # –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å–ª–∞
    if data.isdigit():
        oil_id = int(data)
        if oil_id not in oils:
            await safe_reply_text(query.message, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await show_typing(context, update.effective_chat.id, 0.6)

        oil = oils[oil_id]
        caption = (
            f"üîπ *{oil['name']}* ({oil['volume']})\n\n"
            f"{oil['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {oil.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} {oil.get('currency', '‚ÇΩ')}\n\n"
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            + "\n".join([f"‚Ä¢ {f}" for f in oil["features"]])
            + f"\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç: {oil['compatible']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")],
            [InlineKeyboardButton("üõí –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"order_{oil_id}")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/shaba_v")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.delete_message()
        except Exception:
            pass

        await query.message.reply_photo(
            photo=oil["image"],
            caption=caption,
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–Ø–í–û–ö ----------
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Ç—å 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω¬ª."""
    if "ordering" not in context.user_data:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ.")
        return

    user = update.effective_user
    if not update.message.contact or not update.message.contact.phone_number:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª –Ω–æ–º–µ—Ä. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.")
        return

    contact = update.message.contact.phone_number.strip()

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    now = time.time()
    last = LAST_ORDER_AT.get(user.id)
    if last is not None:
        remain = ORDER_COOLDOWN_SEC - int(now - last)
        if remain > 0:
            await update.message.reply_text(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {remain} —Å–µ–∫.")
            return

    oil_id = context.user_data["ordering"]
    oil = oils[oil_id]
    username_visible = f"@{user.username}" if user.username else f"ID:{user.id}"

    order = {
        "user_id": user.id,
        "username": user.username,
        "oil": oil["name"],
        "volume": oil["volume"],
        "price": oil.get("price", "‚Äî"),
        "currency": oil.get("currency", "‚ÇΩ"),
        "contact": contact,
    }
    order_id = save_order_sql(order)

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']}) ‚Äî {oil.get('price','‚Äî')} {oil.get('currency','‚ÇΩ')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
        reply_markup=ReplyKeyboardRemove(),
    )

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id}\n\n"
                    f"üõí –¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']})\n"
                    f"üí∞ –¶–µ–Ω–∞: {oil.get('price', '‚Äî')} {oil.get('currency', '‚ÇΩ')}\n"
                    f"üë§ –û—Ç: {username_visible}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}"
                ),
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    LAST_ORDER_AT[user.id] = now
    del context.user_data["ordering"]


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Ç—å 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—Å—Ç–æ–º."""
    user = update.effective_user
    text = update.message.text

    if "ordering" not in context.user_data:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ.")
        return

    ok, norm = validate_contact(text)
    if not ok:
        await update.message.reply_text(norm)
        return
    contact = norm

    now = time.time()
    last = LAST_ORDER_AT.get(user.id)
    if last is not None:
        remain = ORDER_COOLDOWN_SEC - int(now - last)
        if remain > 0:
            await update.message.reply_text(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {remain} —Å–µ–∫.")
            return

    oil_id = context.user_data["ordering"]
    oil = oils[oil_id]
    username_visible = f"@{user.username}" if user.username else f"ID:{user.id}"

    order = {
        "user_id": user.id,
        "username": user.username,
        "oil": oil["name"],
        "volume": oil["volume"],
        "price": oil.get("price", "‚Äî"),
        "currency": oil.get("currency", "‚ÇΩ"),
        "contact": contact,
    }
    order_id = save_order_sql(order)

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']}) ‚Äî {oil.get('price','‚Äî')} {oil.get('currency','‚ÇΩ')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
        reply_markup=ReplyKeyboardRemove(),
    )

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id}\n\n"
                    f"üõí –¢–æ–≤–∞—Ä: {oil['name']} ({oil['volume']})\n"
                    f"üí∞ –¶–µ–Ω–∞: {oil.get('price', '‚Äî')} {oil.get('currency', '‚ÇΩ')}\n"
                    f"üë§ –û—Ç: {username_visible}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}"
                ),
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    LAST_ORDER_AT[user.id] = now
    del context.user_data["ordering"]


# ---------- /orders (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ----------
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await safe_reply_text(update.message, f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: {user.id}")
        return

    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ "/orders N" –∏–ª–∏ "/orders_N"
    page = 1
    args = context.args if hasattr(context, "args") else []
    if args:
        try:
            page = int(args[0])
        except ValueError:
            page = 1
    else:
        txt = (update.message.text or "").strip()
        if "_" in txt:
            try:
                page = int(txt.split("_", 1)[1])
            except ValueError:
                page = 1

    page = max(1, page)
    page_size = 10

    rows, total = fetch_orders_page(page=page, page_size=page_size)
    if total == 0:
        await safe_reply_text(update.message, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    total_pages = (total + page_size - 1) // page_size
    if not rows:
        await safe_reply_text(update.message, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages} –ø—É—Å—Ç–∞.")
        return

    lines = [f"üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ‚Äî —Å—Ç—Ä. {page}/{total_pages}\n"]
    for (oid, user_id, username, oil, volume, price, currency, contact, created_at) in rows:
        username_visible = f"@{username}" if username else f"ID:{user_id}"
        lines.append(
            f"#{oid:03} ‚Äî {oil} ({volume})\n"
            f"üí∞ –¶–µ–Ω–∞: {price or '‚Äî'} {currency or '‚ÇΩ'}\n"
            f"üë§ –û—Ç: {username_visible}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\n"
            f"üïí {created_at}\n"
        )

    hints = []
    if page > 1:
        hints.append(f"/orders_{page-1} ‚Üê –ø—Ä–µ–¥—ã–¥—É—â–∞—è")
    if page < total_pages:
        hints.append(f"/orders_{page+1} ‚Üí —Å–ª–µ–¥—É—é—â–∞—è")

    msg = "\n".join(lines + (["\n" + " | ".join(hints)] if hints else []))
    await safe_reply_text(update.message, msg)


# ---------- –≠–ö–°–ü–û–†–¢–´ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ----------
async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute(
            """
            SELECT id, created_at, user_id, username, oil, volume, price, currency, contact
            FROM orders
            ORDER BY id ASC
            """
        )
        rows = c.fetchall()
    finally:
        conn.close()

    if not rows:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    txt = io.StringIO()
    writer = csv.writer(txt)
    writer.writerow(["id","created_at","user_id","username","oil","volume","price","currency","contact"])
    writer.writerows(rows)

    bio = io.BytesIO(txt.getvalue().encode("utf-8"))
    bio.seek(0)

    filename = f"orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=bio,
        filename=filename,
        caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ (CSV)",
    )


async def export_xlsx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    conn = sqlite3.connect(DB_PATH)
    try:
        c = conn.cursor()
        c.execute(
            """
            SELECT id, created_at, user_id, username, oil, volume, price, currency, contact
            FROM orders
            ORDER BY id ASC
            """
        )
        rows = c.fetchall()
    finally:
        conn.close()

    if not rows:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    wb = Workbook()
    ws = wb.active
    ws.title = "orders"
    headers = ["id","created_at","user_id","username","oil","volume","price","currency","contact"]
    ws.append(headers)
    for r in rows:
        ws.append(list(r))

    bio = io.BytesIO()
    wb.save(bio)
    bio.seek(0)

    filename = f"orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=bio,
        filename=filename,
        caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ (XLSX)",
    )


# ---------- –û –Ω–∞—Å / –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(
        update.message,
        "üè™ –û –Ω–∞—Å\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–µ–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n"
        "üîß –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã.\n\n"
        "üìç –ê–¥—Ä–µ—Å: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –°–µ—Ä–∞—Ñ–∏–º—ã –î–µ—Ä—è–±–∏–Ω–æ–π, –¥. 18–∞\n"
        "üïò –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 21:00",
    )


async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_text(
        update.message,
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 559-39-17 - –ê–Ω–¥—Ä–µ–π, +7 (953) 046-36-54 - –í–ª–∞–¥\n"
        "Telegram: @shaba_v, @andrey_matveev\n"
        "–ê–≤–∏—Ç–æ: https://m.avito.ru/brands/2c07f021e144d3169204cd556d312cdf/items/all",
    )
# ---------- CANCEL ----------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    if "ordering" in context.user_data:
        del context.user_data["ordering"]
        await update.message.reply_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /catalog —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å–ª–æ —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await update.message.reply_text(
            "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ /catalog —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=ReplyKeyboardRemove(),
        )

# ---------- –ì–ª–∞–≤–Ω–∞—è ----------
def main():
    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ë–î + –º–∏–≥—Ä–∞—Ü–∏—è
    init_db()
    try:
        migrate_json_to_sql()
    except Exception as e:
        logger.warning("–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞/–æ—à–∏–±–∫–∞: %s", e)

    # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π httpx-–∫–ª–∏–µ–Ω—Ç
    request = HTTPXRequest(
        connection_pool_size=20,
        read_timeout=60,
        write_timeout=60,
        connect_timeout=15,
        pool_timeout=15,
    )

    app = Application.builder().token(TOKEN).request(request).build()

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("find", find_oil))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("catalog", show_catalog))
    app.add_handler(CommandHandler("orders", show_orders))
    # –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ /orders_2, /orders_3 –∏ —Ç.–¥.
    app.add_handler(MessageHandler(filters.Regex(r"^/orders_\d+$"), show_orders))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("contacts", contacts))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("exportcsv", export_csv))
    app.add_handler(CommandHandler("exportxcsv", export_csv))  # –∞–ª–∏–∞—Å
    app.add_handler(CommandHandler("exportxlsx", export_xlsx))

    # --- –ö–Ω–æ–ø–∫–∏ (callback) ---
    # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é:
    app.add_handler(CallbackQueryHandler(handle_start_button, pattern=r"^(open_catalog|open_search_hint)$"))
    # –ó–∞—Ç–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: back | order_<id> | <id>
    app.add_handler(CallbackQueryHandler(show_oil, pattern=r"^(back|order_\d+|\d+)$"))

    # --- –°–æ–æ–±—â–µ–Ω–∏—è ---
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # --- –û—à–∏–±–∫–∏ ---
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... üöÄ")

    # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã long-polling
    app.run_polling(
        timeout=60,
        poll_interval=1.5,
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
